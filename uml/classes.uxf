<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>840</x><y>620</y><w>230</w><h>200</h></coordinates><panel_attributes>registration::user
--
-id
-name
-email
-password
-type 
-enabled
-created
-updated
--
load(id)
update()
create(name, email, password, type) </panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1150</x><y>700</y><w>230</w><h>120</h></coordinates><panel_attributes>registration::class
--
- id
- course
- datetime
--
+ load(id)
+ update()
+ create(course, datetime)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>840</x><y>340</y><w>230</w><h>160</h></coordinates><panel_attributes>registration::browsers
--
- id
- user
- fingerprint
- first_seen
- last_seen
- hits
--
+ get_fingerprints(user)
+ get_fingerprint(fingerprint)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>450</x><y>360</y><w>230</w><h>110</h></coordinates><panel_attributes>registration::fingerprints
--
- self
--
+ lookup(fingerprint) 
+ mark(fingerprint, user)
+ connections(fingerprint, 
    max_generation)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>410</y><w>190</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;170;10</additional_attributes></element><element><id>Relation</id><coordinates><x>940</x><y>490</y><w>30</w><h>150</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;10;10;130</additional_attributes></element><element><id>UMLClass</id><coordinates><x>450</x><y>540</y><w>230</w><h>110</h></coordinates><panel_attributes>registration::cohesion
--
- self
--
+ get_factor(user, user)
+ risk_score(user) </panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>410</y><w>190</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;170;10</additional_attributes></element><element><id>Relation</id><coordinates><x>550</x><y>460</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;80;10;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>0</x><y>610</y><w>140</w><h>70</h></coordinates><panel_attributes>Note..
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>190</x><y>550</y><w>180</w><h>70</h></coordinates><panel_attributes>Nb. ideally this would look 
at other factors and not just 
the number of common 
connections
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>360</x><y>570</y><w>110</w><h>40</h></coordinates><panel_attributes></panel_attributes><additional_attributes>90;20;10;20</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1150</x><y>450</y><w>230</w><h>180</h></coordinates><panel_attributes>registration::allocations
--
- id
- course
- user
- allocated
--
+ allocate(user, course)
+ check(user, course) 
+ allocations(course) 
+ deallocate(user, course) 
+ next(user, missed) 
+ upcoming(user, limit)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1020</x><y>520</y><w>150</w><h>120</h></coordinates><panel_attributes></panel_attributes><additional_attributes>130;20;10;20;10;100</additional_attributes></element><element><id>Relation</id><coordinates><x>1250</x><y>620</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1150</x><y>180</y><w>230</w><h>200</h></coordinates><panel_attributes>registration::attendance
--
- id
- user
- class
- challenge
- fingerprint
- start 
- complete
--
+ attempt(user, class)
+ complete(id) 
+ check(user, class)
+ list(user, class, start, end) 
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1250</x><y>370</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1410</x><y>180</y><w>230</w><h>200</h></coordinates><panel_attributes>registration::challenge
--
- id
- value
- signature 
- 
--
+ attempt(user, class)
+ complete(id) 
+ check(user, class)
+ list(user, class, start, end) 
</panel_attributes><additional_attributes></additional_attributes></element></diagram>